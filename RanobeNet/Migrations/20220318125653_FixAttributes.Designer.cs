// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RanobeNet.Data;

#nullable disable

namespace RanobeNet.Migrations
{
    [DbContext(typeof(RanobeNetContext))]
    [Migration("20220318125653_FixAttributes")]
    partial class FixAttributes
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("RanobeNet.Models.Data.Chapter", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)");

                    b.Property<long>("NovelId")
                        .HasColumnType("bigint");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("NovelId");

                    b.ToTable("Chapters");
                });

            modelBuilder.Entity("RanobeNet.Models.Data.Episode", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("ChapterId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)");

                    b.Property<long>("NovelId")
                        .HasColumnType("bigint");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<bool>("Private")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Story")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ChapterId");

                    b.HasIndex("NovelId");

                    b.ToTable("Episodes");
                });

            modelBuilder.Entity("RanobeNet.Models.Data.Novel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Author")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("varchar(4000)");

                    b.Property<bool>("Private")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Novels");
                });

            modelBuilder.Entity("RanobeNet.Models.Data.NovelAttribute", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<long?>("EpisodeId")
                        .HasColumnType("bigint");

                    b.Property<long>("NovelId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("EpisodeId");

                    b.HasIndex("NovelId");

                    b.ToTable("NovelAttributes");
                });

            modelBuilder.Entity("RanobeNet.Models.Data.NovelLink", b =>
                {
                    b.Property<long>("NovelId")
                        .HasColumnType("bigint");

                    b.Property<string>("Link")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.HasKey("NovelId", "Link");

                    b.ToTable("NovelLinks");
                });

            modelBuilder.Entity("RanobeNet.Models.Data.NovelTag", b =>
                {
                    b.Property<long>("NovelId")
                        .HasColumnType("bigint");

                    b.Property<string>("Tag")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.HasKey("NovelId", "Tag");

                    b.HasIndex("Tag", "NovelId");

                    b.ToTable("NovelTags");
                });

            modelBuilder.Entity("RanobeNet.Models.Data.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("FirebaseUid")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("FirebaseUid")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("RanobeNet.Models.Data.UserLink", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Link")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.HasKey("UserId", "Link");

                    b.ToTable("UserLinks");
                });

            modelBuilder.Entity("RanobeNet.Models.Data.Chapter", b =>
                {
                    b.HasOne("RanobeNet.Models.Data.Novel", "Novel")
                        .WithMany("Chapters")
                        .HasForeignKey("NovelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Novel");
                });

            modelBuilder.Entity("RanobeNet.Models.Data.Episode", b =>
                {
                    b.HasOne("RanobeNet.Models.Data.Chapter", "Chapter")
                        .WithMany("Episodes")
                        .HasForeignKey("ChapterId");

                    b.HasOne("RanobeNet.Models.Data.Novel", "Novel")
                        .WithMany("Episodes")
                        .HasForeignKey("NovelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chapter");

                    b.Navigation("Novel");
                });

            modelBuilder.Entity("RanobeNet.Models.Data.Novel", b =>
                {
                    b.HasOne("RanobeNet.Models.Data.User", "User")
                        .WithMany("Novels")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("RanobeNet.Models.Data.NovelAttribute", b =>
                {
                    b.HasOne("RanobeNet.Models.Data.Episode", "Episode")
                        .WithMany()
                        .HasForeignKey("EpisodeId");

                    b.HasOne("RanobeNet.Models.Data.Novel", "Novel")
                        .WithMany("Attributes")
                        .HasForeignKey("NovelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Episode");

                    b.Navigation("Novel");
                });

            modelBuilder.Entity("RanobeNet.Models.Data.NovelLink", b =>
                {
                    b.HasOne("RanobeNet.Models.Data.Novel", "Novel")
                        .WithMany("Links")
                        .HasForeignKey("NovelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Novel");
                });

            modelBuilder.Entity("RanobeNet.Models.Data.NovelTag", b =>
                {
                    b.HasOne("RanobeNet.Models.Data.Novel", "Novel")
                        .WithMany("Tags")
                        .HasForeignKey("NovelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Novel");
                });

            modelBuilder.Entity("RanobeNet.Models.Data.UserLink", b =>
                {
                    b.HasOne("RanobeNet.Models.Data.User", "User")
                        .WithMany("Links")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("RanobeNet.Models.Data.Chapter", b =>
                {
                    b.Navigation("Episodes");
                });

            modelBuilder.Entity("RanobeNet.Models.Data.Novel", b =>
                {
                    b.Navigation("Attributes");

                    b.Navigation("Chapters");

                    b.Navigation("Episodes");

                    b.Navigation("Links");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("RanobeNet.Models.Data.User", b =>
                {
                    b.Navigation("Links");

                    b.Navigation("Novels");
                });
#pragma warning restore 612, 618
        }
    }
}
